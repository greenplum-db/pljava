<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.postgresql</groupId>
		<artifactId>pljava.app</artifactId>
		<version>1.5.0</version>
	</parent>
	<artifactId>pljava-so</artifactId>
	<name>PL/Java backend native code</name>
	<description>
		Generates the pljava (.so, .dll, etc.) library which gets loaded		by the PostgreSQL backend
	</description>
	<packaging>nar</packaging>

	<properties>
		<!-- use -Dnar.cores=1 if non-interleaved warning messages wanted -->
		<nar.cores>0</nar.cores>
	</properties>

	<profiles>
		<!-- I still have an inner voice telling me it should never (well,
			hardly ever) be necessary to mention these PostgreSQL libraries
			during the PL/Java link, and on any platform where it isn't
			necessary, it is better not to. Leaving them unresolved should
			allow them to be resolved within the backend process itself, where
			the correct versions will be found, whereas if they are seen at
			link time and DT_NEEDED entries are made for them, the runtime
			linker may pull in *wrong* versions if there are links in the system
			library locations to a different, default-selected PG version.

			However, they were put here by someone, so were probably needed on
			some platform for some reason, so it would be reckless to take them
			out completely. Here they are as a profile. If you can build without
			activating this profile and nothing goes wrong, profit. Otherwise,
			add -Plinkpglibs on the command line and see if that helps. If it
			does, please report your platform and configuration so we know
			where these are actually needed. If it doesn't help, the trouble
			is somewhere else.

			This profile is placed first to avoid changing the resulting
			library order when another profile that adds to libraries (like
			compiler-mingw64) are also active.
			-->
		<profile>
			<id>linkpglibs</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.maven-nar</groupId>
						<artifactId>nar-maven-plugin</artifactId>
						<configuration>
							<linker>
								<libs combine.children='append'>
									<lib>
										<name>ecpg</name>
										<type>shared</type>
										<directory>${PGSQL_LIBDIR}</directory>
									</lib>
									<lib>
										<name>pgtypes</name>
										<type>shared</type>
										<directory>${PGSQL_LIBDIR}</directory>
									</lib>
									<lib>
										<name>pq</name>
										<type>shared</type>
										<directory>${PGSQL_LIBDIR}</directory>
									</lib>
								</libs>
							</linker>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>osx</id>
			<activation>
				<os>
					<name>mac os x</name>
				</os>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.maven-nar</groupId>
						<artifactId>nar-maven-plugin</artifactId>
						<configuration>
							<linker>
								<options combine.children='append'>
									<option>-bundle_loader</option>
									<option>${PGSQL_BINDIR}/postgres</option>
								</options>
							</linker>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>compiler-msvc</id>
			<activation>
				<property>
					<name>env.VCINSTALLDIR</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.maven-nar</groupId>
						<artifactId>nar-maven-plugin</artifactId>
						<configuration>
							<c>
								<defines combine.children='append'>
									<!-- Need this for Visual Studio 2013 and Postgresql v9.3 and below -->
									<define>${MSVC_RINT}</define>
								</defines>
								<includePaths combine.children='append'>
									<includePath>${PGSQL_INCLUDEDIR-SERVER}/port/win32</includePath>
									<includePath>${PGSQL_INCLUDEDIR-SERVER}/port/win32_msvc</includePath>
									<includePath>${basedir}/src/main/include/fallback/win32</includePath>
								</includePaths>
							</c>
							<linker>
								<libs combine.children='append'>
									<lib>
										<name>postgres</name>
										<type>shared</type>
										<directory>${PGSQL_PKGLIBDIR}</directory>
									</lib>
								</libs>
							</linker>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>compiler-mingw64</id>
			<activation>
				<property>
					<name>env.MSYSTEM</name>
					<value>MINGW64</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.maven-nar</groupId>
						<artifactId>nar-maven-plugin</artifactId>
						<configuration>
							<c>
								<includePaths combine.children='append'>
									<includePath>${PGSQL_INCLUDEDIR-SERVER}/port/win32</includePath>
									<includePath>${basedir}/src/main/include/fallback/win32</includePath>
								</includePaths>
							</c>
							<linker>
								<name>g++</name>
								<options combine.children='append'>
									<option>-Wl,--export-all-symbols</option>
								</options>
								<libs combine.children='append'>
									<lib>
										<name>postgres</name>
										<type>shared</type>
										<directory>${PGSQL_PKGLIBDIR}</directory>
									</lib>
								</libs>
							</linker>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>wnosign</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.maven-nar</groupId>
						<artifactId>nar-maven-plugin</artifactId>
						<configuration>
							<c>
								<options>
									<option>-Wno-sign-conversion</option>
								</options>
							</c>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- If the pljava.so must include a RUNPATH for the runtime linker,
			activate this profile by setting -Dpgsql.runpath to the needed path.
			If the prefix for the option is something other than -Wl,-rpath=
			then also set -Dpgsql.runpathpfx to the necessary prefix (including
			the = if there is one). If this scheme is not flexible enough to
			accommodate your linker, then you may as well just edit this file
			and add the right linker options directly. -->
		<profile>
			<id>needsrunpath</id>
			<activation>
				<property>
					<name>pgsql.runpath</name>
				</property>
			</activation>
			<properties>
				<pgsql.runpathpfx>-Wl,-rpath=</pgsql.runpathpfx>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.maven-nar</groupId>
						<artifactId>nar-maven-plugin</artifactId>
						<configuration>
							<linker>
								<options combine.children='append'>
									<option>${pgsql.runpathpfx}${pgsql.runpath}</option>
								</options>
							</linker>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<build>
		<plugins>

			<!-- Several things that could not be done using Maven plugins. This plugin
				must be listet FIRST as the pgsql.properties file has to be written before
				properties-maven-plugin is called, which can apparently also only happen
				in the "initialize" phase. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<!-- Converts pg_config output to "pgsql.properties" -->
					<execution>
						<id>pg_config to pgsql.properties</id>
						<phase>initialize</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<ant />
							</target>
						</configuration>
					</execution>
					<!-- Deploy the PostgreSQL library by copying it.
					<execution>
						<id>deploy pljava.so</id>
						<phase>deploy</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<copy verbose="true"
									file="${basedir}/target/nar/pljava-so-${project.version}-${nar.aol}-shared/lib/${nar.aol}/shared/libpljava-so-${project.version}.so"
									tofile="${PGSQL_PKGLIBDIR}/pljava.so" />
							</target>
						</configuration>
					</execution> -->
				</executions>
			</plugin>

			<!-- Reads the pg_config properties, which were extracted by an Ant task
				in the "initialize" phase, into Maven variables. As this plugin seems to
				get ignored in any phase other than "initialize" it must be listed after
				the Ant task. -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.0-alpha-2</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>read-project-properties</goal>
						</goals>
						<configuration>
							<files>
								<file>${basedir}/target/pgsql.properties</file>
							</files>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Compiles and links the C library. -->
			<plugin>
				<groupId>com.github.maven-nar</groupId>
				<artifactId>nar-maven-plugin</artifactId>
				<version>3.2.3</version>
				<extensions>true</extensions>

				<configuration>
					<maxCores>${nar.cores}</maxCores>
					<!-- Generates C header files from Java class files. -->
					<javah>
						<classPaths>
							<classPath>${basedir}/../pljava/target/classes/</classPath>
							<classPath>${basedir}/../pljava-api/target/classes/</classPath>
						</classPaths>
						<classDirectory>${basedir}/../pljava/target/classes/</classDirectory>
						<extraClasses>
							<extraClass>java.sql.Types</extraClass>
						</extraClasses>
					</javah>

					<!-- Compiles the C sources to object files. -->
					<c>
				<!-- uncomment the next line if you need to configure your compiler (e.g. clang)
						<name>${CPP_COMPILER}</name>
				-->
						<debug>true</debug>
						<defines>
							<define>PLJAVA_SO_VERSION=${project.version}</define>
						</defines>
						<includePaths>
							<!-- TODO: hardcoded paths -->
							<includePath>${PGSQL_INCLUDEDIR}</includePath>
							<includePath>${PGSQL_INCLUDEDIR-SERVER}</includePath>
							<includePath>${PGSQL_PKGINCLUDEDIR}/internal</includePath>
							<includePath>${basedir}/src/main/include/</includePath>
							<includePath>${basedir}/target/nar/javah-include/</includePath>
						</includePaths>
						<options>
						  <option>-g3</option>
						</options>
					</c>

					<!-- Options/extra libs/etc. for the linker go here. -->
					<linker>
					</linker>

					<!-- Builds a *.so library. -->
					<libraries>
						<library>
							<type>plugin</type>
							<!-- Do not add "-lstdc++". Adds "-shared-libgcc" though. -->
							<linkCPP>false</linkCPP>
						</library>
					</libraries>
				</configuration>
			</plugin>

			<!-- The deploy goal will be hijacked by an ant task so the original plugin
				has to be silenced until we actually use it.
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin> -->

		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-antrun-plugin</artifactId>
										<versionRange>[1.7,)</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>properties-maven-plugin</artifactId>
										<versionRange>[1.0-alpha-2,)</versionRange>
										<goals>
											<goal>
												read-project-properties
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.github.maven-nar</groupId>
										<artifactId>nar-maven-plugin</artifactId>
										<versionRange>[3.2.3]</versionRange>
										<goals>
											<goal>nar-compile</goal>
											<goal>nar-download</goal>
											<goal>nar-gnu-configure</goal>
											<goal>nar-gnu-make</goal>
											<goal>nar-gnu-process</goal>
											<goal>nar-gnu-resources</goal>
											<goal>nar-javah</goal>
											<goal>nar-system-generate</goal>
											<goal>nar-resources</goal>
											<goal>nar-testCompile</goal>
											<goal>nar-testDownload</goal>
											<goal>nar-testUnpack</goal>
											<goal>nar-unpack</goal>
											<goal>nar-validate</goal>
											<goal>nar-vcproj</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>
